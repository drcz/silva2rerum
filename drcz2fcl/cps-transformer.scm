(use-modules (ice-9 match)
	     (ice-9 pretty-print)	     
	     (srfi srfi-1))

;;; very crude one, for bootstraping (?)

(define (mk-primop-cps sym)
  (string->symbol (string-append (symbol->string sym) "-k")))
(define (mk-result-name) (gensym "r"))
(define (mk-continuation-name) (gensym "k"))

(define (mk-primop-cps-defs)
  `(#;(! read-k (^ (k) (k (read))))
    (! cons-k (^ (h t k) (k (cons h t))))
    (! car-k (^ (e k) (k (car e))))
    (! cdr-k (^ (e k) (k (cdr e))))
    (! +-k (^ (a b k) (k (+ a b))))
    (! --k (^ (a b k) (k (- a b))))
    (! *-k (^ (a b k) (k (* a b))))
    (! atom?-k (^ (e k) (k (atom? e))))
    (! number?-k (^ (e k) (k (number? e))))
    (! =-k (^ (a b k) (k (= a b))))
    (! <-k (^ (a b k) (k (< a b))))))

(define (trivial? expr)
  (or (null? expr)
      (number? expr)
      (symbol? expr)
      (and (pair? expr) (eq? 'quote (car expr)))))

(define (primop? sym) (member sym '(#;read cons car cdr + - * atom? number? = <)))

(define (cps expr k)
  (match expr
    ((? trivial?)
     `(,k ,expr))
    (((? primop? p) . args)
     (let* ((names (map (lambda (x) (mk-result-name)) args))
	    (exprs args)
	    (fin (append (list (mk-primop-cps p)) names (list k))))
       (mk-cps-chain names exprs fin)))
    (('^ args body)
     (let ((cont (mk-continuation-name)))
       `(,k (^ ,(append args (list cont))
		    ,(cps body cont)))))
    (('if e1 e2 e3)     
     (cps e1 `(^ (v1) (if v1 ,(cps e2 k) ,(cps e3 k)))))
    ((f . args)
     (let* ((names (map (lambda (x) (mk-result-name)) expr))
	    (exprs expr)
	    (fin (append names (list k))))
       (mk-cps-chain names exprs fin)))))

(define (mk-cps-chain names exprs fin)
  (if (null? names)
      fin
      (cps (car exprs)
	   `(^ (,(car names))
	       ,(mk-cps-chain (cdr names) (cdr exprs) fin)))))

(define (cpsize prg)
  (let* ((defs prg #;(drop-right prg 1))
	 (main (car (take-right defs 1)))
	 (defs1 (map (lambda (e) `(! ,(cadr e) ,(cadr (cps (caddr e) 'k)))) defs))
	 (expr1 (let* ((lhs (cadr main))
		       (name lhs)
		       (new-name (string->symbol (string-append (symbol->string name) "-cpsed")))
		       (rhs (caddr main))
		       (args (cadr rhs)))
		  `(! ,new-name (^ ,args ,(append `(,name . ,args) `((^ (x) x))))))))
    (append (mk-primop-cps-defs) defs1 (list expr1))))

(pretty-print (cpsize (read)))
		      